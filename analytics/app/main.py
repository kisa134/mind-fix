import streamlit as st
import pandas as pd
from pathlib import Path
import json
import plotly.express as px
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
PROJECT_ROOT = Path(__file__).parent.parent.parent
LOGS_DIR = PROJECT_ROOT / "telegram_bot" / "logs"

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_log_data(log_dir: Path) -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ interaction –ª–æ–≥–∏ –∏–∑ .jsonl —Ñ–∞–π–ª–æ–≤ –≤ DataFrame."""
    all_interactions = []
    if not log_dir.exists():
        st.warning(f"–ü–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {log_dir}")
        return pd.DataFrame()

    log_files = sorted(log_dir.glob("interactions_*.jsonl"))
    if not log_files:
        st.info("–õ–æ–≥–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return pd.DataFrame()

    for log_file in log_files:
        with open(log_file, 'r', encoding='utf-8') as f:
            for line in f:
                try:
                    all_interactions.append(json.loads(line))
                except json.JSONDecodeError:
                    continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

    df = pd.DataFrame(all_interactions)
    if not df.empty:
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        df['date'] = df['timestamp'].dt.date
    return df

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ ---
def display_kpi_metrics(df: pd.DataFrame):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    if df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫.")
        return

    total_messages = len(df)
    unique_users = df['user_id'].nunique()
    avg_resp_len = df['response_length'].mean()
    avg_query_len = df['query_length'].mean()

    col1, col2, col3, col4 = st.columns(4)
    col1.metric("–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π", f"{total_messages}")
    col2.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{unique_users}")
    col3.metric("Avg. –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞", f"{avg_resp_len:.1f} —Å–∏–º–≤.")
    col4.metric("Avg. –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞", f"{avg_query_len:.1f} —Å–∏–º–≤.")

def display_activity_charts(df: pd.DataFrame):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    st.subheader("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    if df.empty or 'date' not in df.columns:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        return
        
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
    daily_activity = df.groupby('date').size().reset_index(name='messages')
    fig_daily = px.bar(daily_activity, x='date', y='messages', title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–Ω—è–º', text_auto=True)
    fig_daily.update_layout(xaxis_title="–î–∞—Ç–∞", yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π")
    st.plotly_chart(fig_daily, use_container_width=True)

def display_content_analysis(df: pd.DataFrame):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    st.subheader("üìù –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    if df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
        return
        
    col1, col2 = st.columns(2)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    with col1:
        doc_type_counts = df['doc_type'].fillna('N/A').value_counts()
        fig_pie = px.pie(
            doc_type_counts, 
            values=doc_type_counts.values, 
            names=doc_type_counts.index, 
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤'
        )
        st.plotly_chart(fig_pie, use_container_width=True)

    # –û–±–ª–∞–∫–æ —Å–ª–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
    with col2:
        st.write("**–û–±–ª–∞–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö**")
        all_queries = " ".join(df['query'].dropna())
        if all_queries:
            try:
                wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_queries)
                fig, ax = plt.subplots()
                ax.imshow(wordcloud, interpolation='bilinear')
                ax.axis('off')
                st.pyplot(fig)
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±–ª–∞–∫–æ —Å–ª–æ–≤: {e}")
        else:
            st.info("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤.")

def display_dialogue_viewer(df: pd.DataFrame):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤."""
    st.subheader("üí¨ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤")

    if df.empty:
        st.info("–ù–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        return
        
    user_list = df['user_id'].unique()
    selected_user = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–∞–ª–æ–≥–∞:", user_list)

    if selected_user:
        user_dialogues = df[df['user_id'] == selected_user].sort_values(by='timestamp')
        
        for _, row in user_dialogues.iterrows():
            with st.chat_message("user"):
                st.markdown(f"**–í—ã ({row['username']})** –≤ {row['timestamp'].strftime('%Y-%m-%d %H:%M')}:")
                st.write(row['query'])
            
            with st.chat_message("assistant", avatar="üß†"):
                st.markdown(f"**Mind-Fix** –æ—Ç–≤–µ—Ç–∏–ª:")
                st.write(row['response'])
            st.markdown("---")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
    """
    st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Mind-Fix", page_icon="üß†", layout="wide")
    st.title("–ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Mind-Fix")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df_interactions = load_log_data(LOGS_DIR)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    display_kpi_metrics(df_interactions)
    st.markdown("---")
    display_activity_charts(df_interactions)
    st.markdown("---")
    display_content_analysis(df_interactions)
    st.markdown("---")
    display_dialogue_viewer(df_interactions)

if __name__ == "__main__":
    main() 