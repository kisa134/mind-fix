#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Mind-Fix
"""

import asyncio
import aiohttp
import json
from pathlib import Path

async def test_backend_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç backend API."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend API...")
    
    url = "http://localhost:8000/api/v1/rag/query"
    test_query = {
        "text": "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–µ–≤—Ä–æ–∑ –≤ –ò–¢–ù?",
        "doc_type": "theory"
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=test_query) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç. –û—Ç–≤–µ—Ç: {data['response'][:100]}...")
                    return True
                else:
                    print(f"‚ùå Backend API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Backend API: {e}")
        return False

def test_rag_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RAG pipeline."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG Pipeline...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
    chroma_path = Path("rag_data/chroma_db")
    if chroma_path.exists():
        print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞")
        return True
    else:
        print("‚ùå –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

def test_data_files():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    data_path = Path("data")
    required_files = ["–ê–¥–∞–ø—Ç–æ–ª–æ–≥–∏—è.docx", "–ü–æ–ª–Ω—ã–π –ò–¢–ù (3).docx"]
    
    missing_files = []
    for file in required_files:
        if not (data_path / file).exists():
            missing_files.append(file)
    
    if not missing_files:
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã")
        return True
    else:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False

def test_config_files():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    config_files = [
        ".env",
        "backend/app/core/config.py",
        "telegram_bot/bot/core/config.py",
        "rag_pipeline/core/config.py"
    ]
    
    missing_files = []
    for file in config_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if not missing_files:
        print("‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
        return True
    else:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False

def test_docker_setup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    docker_files = [
        "docker-compose.yml",
        "backend/Dockerfile",
        "telegram_bot/Dockerfile",
        "analytics/Dockerfile"
    ]
    
    missing_files = []
    for file in docker_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if not missing_files:
        print("‚úÖ –í—Å–µ Docker —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
        return True
    else:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Mind-Fix\n")
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config_files),
        ("–§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö", test_data_files),
        ("RAG Pipeline", test_rag_pipeline),
        ("Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_docker_setup),
    ]
    
    results = []
    for name, test_func in tests:
        result = test_func()
        results.append((name, result))
        print()
    
    # –¢–µ—Å—Ç Backend API (–µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω)
    backend_result = await test_backend_api()
    results.append(("Backend API", backend_result))
    
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*50)
    
    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{name}: {status}")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(main()) 